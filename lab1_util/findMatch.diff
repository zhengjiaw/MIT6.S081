diff --git a/labs/lab0_util/find.c b/labs/lab0_util/find.c
index da71002..6a13c48 100644
--- a/labs/lab0_util/find.c
+++ b/labs/lab0_util/find.c
@@ -4,9 +4,10 @@
 #include "kernel/stat.h"
 char* fmtname(char *path);
 // 查找 path 路径下， 名为 targetName 的文件
-void find(char* path, const char *targetName);
+void find(char* path, char *targetName);
 // 处理文件的情况，目录的情况 直接写在 find 中了
-void fileHand(char *path, const char *targetName) ;
+void fileHand(char *path, char *targetName) ;
+int match(char *re, char *text);
 
 int main(int argc, char *argv[])
 {
@@ -24,7 +25,7 @@ int main(int argc, char *argv[])
     exit(0);
 }
 
-void  find(char* path, const char *targetName)
+void find(char* path, char *targetName)
 {
     // 打开这个路径
     int fd = open(path, 0);
@@ -67,12 +68,11 @@ void  find(char* path, const char *targetName)
     close(fd);
 }
 
-void
-fileHand(char *path, const char *targetName) 
+void fileHand(char *path, char *targetName) 
 {
     char *name = fmtname(path);
     // printf("name: %s path: %s  targetName : %s  %d \n", name, path, targetName, strcmp(name, targetName));
-    if(strcmp(name, targetName) == 0) 
+    if(match(name, targetName)) 
         fprintf(1, "%s\n", path);
 }
 
@@ -91,4 +91,46 @@ char* fmtname(char *path)
   memmove(buf, p, strlen(p));
   memset(buf+strlen(p), 0, DIRSIZ-strlen(p));
   return buf;
-}
\ No newline at end of file
+}
+
+// Regexp matcher from Kernighan & Pike,
+// The Practice of Programming, Chapter 9.
+
+int matchhere(char*, char*);
+int matchstar(int, char*, char*);
+
+int match(char *re, char *text)
+{
+  if(re[0] == '^')
+    return matchhere(re+1, text);
+  do{  // must look at empty string
+    if(matchhere(re, text))
+      return 1;
+  }while(*text++ != '\0');
+  return 0;
+}
+
+// matchhere: search for re at beginning of text
+int matchhere(char *re, char *text)
+{
+  if(re[0] == '\0')
+    return 1;
+  if(re[1] == '*')
+    return matchstar(re[0], re+2, text);
+  if(re[0] == '$' && re[1] == '\0')
+    return *text == '\0';
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+    return matchhere(re+1, text+1);
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  return 0;
+}
+
