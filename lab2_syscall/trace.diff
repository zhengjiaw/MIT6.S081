diff --git a/Makefile b/Makefile
index f0beb51..1c07efd 100644
--- a/Makefile
+++ b/Makefile
@@ -149,6 +149,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
 
 
 
diff --git a/grade-lab-syscall b/grade-lab-syscall
index 57c975e..65b8bb7 100755
--- a/grade-lab-syscall
+++ b/grade-lab-syscall
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 import re
 from gradelib import *
diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..abd0669 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -139,6 +139,7 @@ int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
 void            syscall();
 
+
 // trap.c
 extern uint     ticks;
 void            trapinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 6afafa1..0ef0795 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -295,6 +295,8 @@ fork(void)
 
   np->state = RUNNABLE;
 
+  np->tracemask = p->tracemask;
+
   release(&np->lock);
 
   return pid;
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..902314c 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tracemask;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..9656d91 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_trace(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,8 +128,51 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace
 };
 
+const char *syscall_names[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+};
+
+void trace(int mask)
+{
+    struct proc *p = myproc();
+    p->tracemask = mask;
+    // printf("%d trace --     %d\n", p->tracemask, mask);
+}
+
+uint64
+sys_trace(void)
+{
+  uint64 mask;
+  if(argaddr(0, &mask) < 0)
+    return -1;
+//   printf("%d ---- sys_trace\n", mask);
+  trace(mask);
+  return 0;  // not reached
+}
 void
 syscall(void)
 {
@@ -138,6 +182,16 @@ syscall(void)
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     p->trapframe->a0 = syscalls[num]();
+    for(int i = 1, t = p->tracemask;i <= t; ++ i) {
+    //   printf("syscall_ i : %d   num : %d  t: %d\n", i, num, t);
+      if(t & (1 << i)) {
+        if(i == num)
+          printf("%d: syscall %s -> %d\n", p->pid, syscall_names[num],
+                                        p->trapframe->a0);
+        else if(i > num) break;
+      }
+    }
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..cc112b9 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
diff --git a/user/user.h b/user/user.h
index b71ecda..7e380bf 100644
--- a/user/user.h
+++ b/user/user.h
@@ -2,6 +2,7 @@ struct stat;
 struct rtcdate;
 
 // system calls
+int trace(int);
 int fork(void);
 int exit(int) __attribute__((noreturn));
 int wait(int*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..afb754e 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+
