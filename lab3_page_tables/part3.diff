diff --git a/kernel/defs.h b/kernel/defs.h
index 596c4c3..f1cb2dc 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -159,6 +159,7 @@ void            uartputc_sync(int);
 int             uartgetc(void);
 
 // vm.c
+int             uvmcopy_not_physical(pagetable_t, pagetable_t, uint64, uint64);           
 void            kvmmap_pagetable(pagetable_t kernel_pagetable, 
                 uint64 va, uint64 pa, uint64 sz, int perm);
 void            kernel_pagetable_free(pagetable_t);
diff --git a/kernel/exec.c b/kernel/exec.c
index ee72a53..0fb9c26 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -12,6 +12,8 @@ static int loadseg(pde_t *pgdir, uint64 addr, struct inode *ip, uint offset, uin
 int
 exec(char *path, char **argv)
 {
+//   printf("path %s  str : %s      --- \n", path, argv[0]);
+//   printf("str : %s      --- \n", argv[1]);
   char *s, *last;
   int i, off;
   uint64 argc, sz = 0, sp, ustack[MAXARG+1], stackbase;
@@ -51,6 +53,8 @@ exec(char *path, char **argv)
     uint64 sz1;
     if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
       goto bad;
+    if(sz1 >= PLIC)  // 检测
+        goto bad;
     sz = sz1;
     if(ph.vaddr % PGSIZE != 0)
       goto bad;
@@ -111,6 +115,8 @@ exec(char *path, char **argv)
   // Commit to the user image.
   oldpagetable = p->pagetable;
   p->pagetable = pagetable;
+  uvmunmap(p->kernel_pagetable, 0, PGROUNDUP(p->sz) / PGSIZE, 0);
+  uvmcopy_not_physical(pagetable, p->kernel_pagetable, 0, sz);
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
diff --git a/kernel/proc.c b/kernel/proc.c
index 654c558..32fe712 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -119,6 +119,7 @@ found:
   if(pa == 0)
     panic("kalloc");
   uint64 va = KSTACK((int) (0));
+  
   kvmmap_pagetable(p->kernel_pagetable, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
   p->kstack = va;
 
@@ -154,7 +155,8 @@ freeproc(struct proc *p)
   uint64 kstack_pa  = kvmpa(p->kernel_pagetable, p->kstack);
   kfree((void*)kstack_pa);
   p->kstack = 0;
-  kernel_pagetable_free(p->kernel_pagetable);
+  if(p->kernel_pagetable)
+    kernel_pagetable_free(p->kernel_pagetable);
   p->kernel_pagetable = 0;
 }
 
@@ -226,6 +228,7 @@ userinit(void)
   // and data into it.
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
+  uvmcopy_not_physical(p->pagetable, p->kernel_pagetable, 0, p->sz);
 
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
@@ -233,7 +236,6 @@ userinit(void)
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
-
   p->state = RUNNABLE;
 
   release(&p->lock);
@@ -249,12 +251,22 @@ growproc(int n)
 
   sz = p->sz;
   if(n > 0){
+    if (PGROUNDUP(sz + n) >= PLIC)
+      return -1;
     if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
       return -1;
     }
+    uvmcopy_not_physical(p->pagetable, p->kernel_pagetable, p->sz, sz);
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    // 缩小 kernel_pagetable 的相应映射
+    int newsz = p->sz + n;
+    if(PGROUNDUP(newsz) < PGROUNDUP(p->sz)){
+      int npages = (PGROUNDUP(p->sz) - PGROUNDUP(newsz)) / PGSIZE;
+      uvmunmap(p->kernel_pagetable, PGROUNDUP(newsz), npages, 0);
+    }
   }
+ 
   p->sz = sz;
   return 0;
 }
@@ -274,7 +286,8 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0 ||
+     uvmcopy_not_physical(np->pagetable, np->kernel_pagetable, 0, p->sz) < 0){  // copy 到 物理页面
     freeproc(np);
     release(&np->lock);
     return -1;
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 5dc453b..4ea452e 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -418,7 +418,7 @@ sys_exec(void)
   char path[MAXPATH], *argv[MAXARG];
   int i;
   uint64 uargv, uarg;
-
+  // 拿到 两个参数，path，argv
   if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
     return -1;
   }
diff --git a/kernel/vm.c b/kernel/vm.c
index f6bf679..8946589 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -47,8 +47,8 @@ kvmmap_pagetable(pagetable_t kernel_pagetable, uint64 va, uint64 pa, uint64 sz,
 void kvm_init_pagetable(pagetable_t* kernel_pagetable)
 {
   *kernel_pagetable = (pagetable_t) kalloc();
+  if(*kernel_pagetable == 0) return;
   memset(*kernel_pagetable, 0, PGSIZE);
-
   // uart registers
   kvmmap_pagetable(*kernel_pagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
@@ -394,6 +394,25 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
+int
+uvmcopy_not_physical(pagetable_t old, pagetable_t new, uint64 begin, uint64 end)
+{
+  pte_t *pte, *newPte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = PGROUNDUP(begin); i < end; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy_not_physical: pte should exist");
+    if ((newPte = walk(new, i, 1)) == 0)
+      panic("uvmcopy_not_physical: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte) & (~PTE_U);
+    *newPte = PA2PTE(pa) | flags ;
+  }
+  return 0;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -431,30 +450,34 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   }
   return 0;
 }
-
+int
+copyin_new(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len);
+int
+copyinstr_new(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max);
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
 int
 copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
-  uint64 n, va0, pa0;
-
-  while(len > 0){
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (srcva - va0);
-    if(n > len)
-      n = len;
-    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
-
-    len -= n;
-    dst += n;
-    srcva = va0 + PGSIZE;
-  }
-  return 0;
+  return copyin_new(pagetable, dst, srcva, len);
 }
 
 // Copy a null-terminated string from user to kernel.
@@ -464,38 +487,39 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 int
 copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 {
-  uint64 n, va0, pa0;
-  int got_null = 0;
-
-  while(got_null == 0 && max > 0){
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (srcva - va0);
-    if(n > max)
-      n = max;
-
-    char *p = (char *) (pa0 + (srcva - va0));
-    while(n > 0){
-      if(*p == '\0'){
-        *dst = '\0';
-        got_null = 1;
-        break;
-      } else {
-        *dst = *p;
-      }
-      --n;
-      --max;
-      p++;
-      dst++;
-    }
-
-    srcva = va0 + PGSIZE;
-  }
-  if(got_null){
-    return 0;
-  } else {
-    return -1;
-  }
+  return copyinstr_new(pagetable, dst, srcva, max);
 }
