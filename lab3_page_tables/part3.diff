diff --git a/kernel/defs.h b/kernel/defs.h
index 596c4c3..f1cb2dc 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -159,6 +159,7 @@ void            uartputc_sync(int);
 int             uartgetc(void);
 
 // vm.c
+int             uvmcopy_not_physical(pagetable_t, pagetable_t, uint64, uint64);           
 void            kvmmap_pagetable(pagetable_t kernel_pagetable, 
                 uint64 va, uint64 pa, uint64 sz, int perm);
 void            kernel_pagetable_free(pagetable_t);
diff --git a/kernel/exec.c b/kernel/exec.c
index ee72a53..0fb9c26 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -12,6 +12,8 @@ static int loadseg(pde_t *pgdir, uint64 addr, struct inode *ip, uint offset, uin
 int
 exec(char *path, char **argv)
 {
+//   printf("path %s  str : %s      --- \n", path, argv[0]);
+//   printf("str : %s      --- \n", argv[1]);
   char *s, *last;
   int i, off;
   uint64 argc, sz = 0, sp, ustack[MAXARG+1], stackbase;
@@ -51,6 +53,8 @@ exec(char *path, char **argv)
     uint64 sz1;
     if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
       goto bad;
+    if(sz1 >= PLIC)  // 检测
+        goto bad;
     sz = sz1;
     if(ph.vaddr % PGSIZE != 0)
       goto bad;
@@ -111,6 +115,8 @@ exec(char *path, char **argv)
   // Commit to the user image.
   oldpagetable = p->pagetable;
   p->pagetable = pagetable;
+  uvmunmap(p->kernel_pagetable, 0, PGROUNDUP(p->sz) / PGSIZE, 0);
+  uvmcopy_not_physical(pagetable, p->kernel_pagetable, 0, sz);
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
diff --git a/kernel/proc.c b/kernel/proc.c
index 654c558..32fe712 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -119,6 +119,7 @@ found:
   if(pa == 0)
     panic("kalloc");
   uint64 va = KSTACK((int) (0));
+  
   kvmmap_pagetable(p->kernel_pagetable, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
   p->kstack = va;
 
@@ -154,7 +155,8 @@ freeproc(struct proc *p)
   uint64 kstack_pa  = kvmpa(p->kernel_pagetable, p->kstack);
   kfree((void*)kstack_pa);
   p->kstack = 0;
-  kernel_pagetable_free(p->kernel_pagetable);
+  if(p->kernel_pagetable)
+    kernel_pagetable_free(p->kernel_pagetable);
   p->kernel_pagetable = 0;
 }
 
@@ -226,6 +228,7 @@ userinit(void)
   // and data into it.
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
+  uvmcopy_not_physical(p->pagetable, p->kernel_pagetable, 0, p->sz);
 
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
@@ -233,7 +236,6 @@ userinit(void)
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
-
   p->state = RUNNABLE;
 
   release(&p->lock);
@@ -249,12 +251,22 @@ growproc(int n)
 
   sz = p->sz;
   if(n > 0){
+    if (PGROUNDUP(sz + n) >= PLIC)
+      return -1;
     if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
       return -1;
     }
+    uvmcopy_not_physical(p->pagetable, p->kernel_pagetable, p->sz, sz);
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    // 缩小 kernel_pagetable 的相应映射
+    int newsz = p->sz + n;
+    if(PGROUNDUP(newsz) < PGROUNDUP(p->sz)){
+      int npages = (PGROUNDUP(p->sz) - PGROUNDUP(newsz)) / PGSIZE;
+      uvmunmap(p->kernel_pagetable, PGROUNDUP(newsz), npages, 0);
+    }
   }
+ 
   p->sz = sz;
   return 0;
 }
@@ -274,7 +286,8 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0 ||
+     uvmcopy_not_physical(np->pagetable, np->kernel_pagetable, 0, p->sz) < 0){  // copy 到 物理页面
     freeproc(np);
     release(&np->lock);
     return -1;
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 5dc453b..4ea452e 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -418,7 +418,7 @@ sys_exec(void)
   char path[MAXPATH], *argv[MAXARG];
   int i;
   uint64 uargv, uarg;
-
+  // 拿到 两个参数，path，argv
   if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
     return -1;
   }
diff --git a/kernel/vm.c b/kernel/vm.c
index f6bf679..8946589 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -47,8 +47,8 @@ kvmmap_pagetable(pagetable_t kernel_pagetable, uint64 va, uint64 pa, uint64 sz,
 void kvm_init_pagetable(pagetable_t* kernel_pagetable)
 {
   *kernel_pagetable = (pagetable_t) kalloc();
+  if(*kernel_pagetable == 0) return;
   memset(*kernel_pagetable, 0, PGSIZE);
-
   // uart registers
   kvmmap_pagetable(*kernel_pagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
 
@@ -99,17 +99,17 @@ kvminithart()
 
 void kernel_pagetable_free(pagetable_t pagetable)
 {
-    // there are 2^9 = 512 PTEs in a page table.
+  // there are 2^9 = 512 PTEs in a page table.
 	for(int i = 0;i < 512; ++i) {
 		pte_t pte = pagetable[i];
 		if((pte & PTE_V)) {
-				// 求出这一页对应的物理地址
-				uint64 child = PTE2PA(pte);
-				// printf("..%d: pte %p pa %p\n", i, pte, child);
-				// 如果这一页可运行或读或写，那么就是最底层页表了，不用继续遍历了
-				if((pte & (PTE_R|PTE_W|PTE_X)) == 0)
-					kernel_pagetable_free((pagetable_t)child);
-			  pagetable[i] = 0; // 释放这一页从 虚拟内存到物理内存的映射
+      // 求出这一页对应的物理地址
+      uint64 child = PTE2PA(pte);
+      // printf("..%d: pte %p pa %p\n", i, pte, child);
+      // 如果这一页可运行或读或写，那么就是最底层页表了，不用继续遍历了
+      if((pte & (PTE_R|PTE_W|PTE_X)) == 0)
+          kernel_pagetable_free((pagetable_t)child);
+      pagetable[i] = 0; // 释放这一页从 虚拟内存到物理内存的映射
 		}
   }
 	kfree((void*)pagetable);
@@ -394,6 +394,25 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmcopy_not_physical(pagetable_t old, pagetable_t new, uint64 begin, uint64 end)
+{
+  pte_t *pte, *newPte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = PGROUNDUP(begin); i < end; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy_not_physical: pte should exist");
+    if ((newPte = walk(new, i, 1)) == 0)
+      panic("uvmcopy_not_physical: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte) & (~PTE_U);
+    *newPte = PA2PTE(pa) | flags ;
+  }
+  return 0;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -431,30 +450,34 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   }
   return 0;
 }
-
+int
+copyin_new(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len);
+int
+copyinstr_new(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max);
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
 int
 copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
-  uint64 n, va0, pa0;
-
-  while(len > 0){
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (srcva - va0);
-    if(n > len)
-      n = len;
-    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
-
-    len -= n;
-    dst += n;
-    srcva = va0 + PGSIZE;
-  }
-  return 0;
+  return copyin_new(pagetable, dst, srcva, len);
+//   uint64 n, va0, pa0;
+
+//   while(len > 0){
+//     va0 = PGROUNDDOWN(srcva);
+//     pa0 = walkaddr(pagetable, va0);
+//     if(pa0 == 0)
+//       return -1;
+//     n = PGSIZE - (srcva - va0);
+//     if(n > len)
+//       n = len;
+//     memmove(dst, (void *)(pa0 + (srcva - va0)), n);
+
+//     len -= n;
+//     dst += n;
+//     srcva = va0 + PGSIZE;
+//   }
+//   return 0;
 }
 
 // Copy a null-terminated string from user to kernel.
@@ -464,38 +487,39 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 int
 copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 {
-  uint64 n, va0, pa0;
-  int got_null = 0;
-
-  while(got_null == 0 && max > 0){
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (srcva - va0);
-    if(n > max)
-      n = max;
-
-    char *p = (char *) (pa0 + (srcva - va0));
-    while(n > 0){
-      if(*p == '\0'){
-        *dst = '\0';
-        got_null = 1;
-        break;
-      } else {
-        *dst = *p;
-      }
-      --n;
-      --max;
-      p++;
-      dst++;
-    }
-
-    srcva = va0 + PGSIZE;
-  }
-  if(got_null){
-    return 0;
-  } else {
-    return -1;
-  }
+  return copyinstr_new(pagetable, dst, srcva, max);
+//     uint64 n, va0, pa0;
+//   int got_null = 0;
+
+//   while(got_null == 0 && max > 0){
+//     va0 = PGROUNDDOWN(srcva);
+//     pa0 = walkaddr(pagetable, va0);
+//     if(pa0 == 0)
+//       return -1;
+//     n = PGSIZE - (srcva - va0);
+//     if(n > max)
+//       n = max;
+
+//     char *p = (char *) (pa0 + (srcva - va0));
+//     while(n > 0){
+//       if(*p == '\0'){
+//         *dst = '\0';
+//         got_null = 1;
+//         break;
+//       } else {
+//         *dst = *p;
+//       }
+//       --n;
+//       --max;
+//       p++;
+//       dst++;
+//     }
+
+//     srcva = va0 + PGSIZE;
+//   }
+//   if(got_null){
+//     return 0;
+//   } else {
+//     return -1;
+//   }
 }
diff --git a/lab3_page_tables/A_kernel_page_table_per_process.diff b/lab3_page_tables/A_kernel_page_table_per_process.diff
deleted file mode 100644
index 591fcf1..0000000
--- a/lab3_page_tables/A_kernel_page_table_per_process.diff
+++ /dev/null
@@ -1,249 +0,0 @@
-diff --git a/kernel/defs.h b/kernel/defs.h
-index e834c21..596c4c3 100644
---- a/kernel/defs.h
-+++ b/kernel/defs.h
-@@ -159,10 +159,15 @@ void            uartputc_sync(int);
- int             uartgetc(void);
- 
- // vm.c
-+void            kvmmap_pagetable(pagetable_t kernel_pagetable, 
-+                uint64 va, uint64 pa, uint64 sz, int perm);
-+void            kernel_pagetable_free(pagetable_t);
-+void            kvm_init_pagetable(pagetable_t*);
-+void            kvminithart_pagetable(pagetable_t);
- void            vmprint(pagetable_t);
- void            kvminit(void);
- void            kvminithart(void);
--uint64          kvmpa(uint64);
-+uint64          kvmpa(pagetable_t, uint64);
- void            kvmmap(uint64, uint64, uint64, int);
- int             mappages(pagetable_t, uint64, uint64, uint64, int);
- pagetable_t     uvmcreate(void);
-diff --git a/kernel/proc.c b/kernel/proc.c
-index dab1e1d..654c558 100644
---- a/kernel/proc.c
-+++ b/kernel/proc.c
-@@ -25,23 +25,13 @@ extern char trampoline[]; // trampoline.S
- void
- procinit(void)
- {
--  struct proc *p;
-+  struct proc *p = proc;
-   
-   initlock(&pid_lock, "nextpid");
--  for(p = proc; p < &proc[NPROC]; p++) {
--      initlock(&p->lock, "proc");
--
--      // Allocate a page for the process's kernel stack.
--      // Map it high in memory, followed by an invalid
--      // guard page.
--      char *pa = kalloc();
--      if(pa == 0)
--        panic("kalloc");
--      uint64 va = KSTACK((int) (p - proc));
--      kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
--      p->kstack = va;
--  }
--  kvminithart();
-+  for(p = proc; p < &proc[NPROC]; p++) 
-+    initlock(&p->lock, "proc");
-+  
-+  kvminithart(); // 切换此进程的内核页表
- }
- 
- // Must be called with interrupts disabled,
-@@ -120,13 +110,23 @@ found:
-     release(&p->lock);
-     return 0;
-   }
-+  
-+  kvm_init_pagetable(&p->kernel_pagetable); // 初始化每一个进程内核页表
-+  // Allocate a page for the process's kernel stack.
-+  // Map it high in memory, followed by an invalid
-+  // guard page.
-+  char *pa = kalloc();
-+  if(pa == 0)
-+    panic("kalloc");
-+  uint64 va = KSTACK((int) (0));
-+  kvmmap_pagetable(p->kernel_pagetable, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
-+  p->kstack = va;
- 
-   // Set up new context to start executing at forkret,
-   // which returns to user space.
-   memset(&p->context, 0, sizeof(p->context));
-   p->context.ra = (uint64)forkret;
-   p->context.sp = p->kstack + PGSIZE;
--
-   return p;
- }
- 
-@@ -150,6 +150,12 @@ freeproc(struct proc *p)
-   p->killed = 0;
-   p->xstate = 0;
-   p->state = UNUSED;
-+  
-+  uint64 kstack_pa  = kvmpa(p->kernel_pagetable, p->kstack);
-+  kfree((void*)kstack_pa);
-+  p->kstack = 0;
-+  kernel_pagetable_free(p->kernel_pagetable);
-+  p->kernel_pagetable = 0;
- }
- 
- // Create a user page table for a given process,
-@@ -473,8 +479,9 @@ scheduler(void)
-         // before jumping back to us.
-         p->state = RUNNING;
-         c->proc = p;
-+        kvminithart_pagetable(p->kernel_pagetable); // 切换此进程的内核页表
-         swtch(&c->context, &p->context);
--
-+        kvminithart(); // 没有进程就切换为 原来的内核页表
-         // Process is done running for now.
-         // It should have changed its p->state before coming back.
-         c->proc = 0;
-diff --git a/kernel/proc.h b/kernel/proc.h
-index 9c16ea7..171b785 100644
---- a/kernel/proc.h
-+++ b/kernel/proc.h
-@@ -103,4 +103,5 @@ struct proc {
-   struct file *ofile[NOFILE];  // Open files
-   struct inode *cwd;           // Current directory
-   char name[16];               // Process name (debugging)
-+  pagetable_t kernel_pagetable;   // 每一个进程的内核页表
- };
-diff --git a/kernel/virtio_disk.c b/kernel/virtio_disk.c
-index 06e0645..5c0e5fe 100644
---- a/kernel/virtio_disk.c
-+++ b/kernel/virtio_disk.c
-@@ -16,6 +16,7 @@
- #include "fs.h"
- #include "buf.h"
- #include "virtio.h"
-+#include "proc.h"
- 
- // the address of virtio mmio register r.
- #define R(r) ((volatile uint32 *)(VIRTIO0 + (r)))
-@@ -203,7 +204,7 @@ virtio_disk_rw(struct buf *b, int write)
- 
-   // buf0 is on a kernel stack, which is not direct mapped,
-   // thus the call to kvmpa().
--  disk.desc[idx[0]].addr = (uint64) kvmpa((uint64) &buf0);
-+  disk.desc[idx[0]].addr = (uint64) kvmpa(myproc()->kernel_pagetable ,(uint64) &buf0);
-   disk.desc[idx[0]].len = sizeof(buf0);
-   disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
-   disk.desc[idx[0]].next = idx[1];
-diff --git a/kernel/vm.c b/kernel/vm.c
-index b2c9802..f6bf679 100644
---- a/kernel/vm.c
-+++ b/kernel/vm.c
-@@ -37,37 +37,55 @@ void vmprint(pagetable_t pagetable)
-     printf("page table %p\n", pagetable);
-     vmprint_helper(pagetable, 0);
- }
-+void 
-+kvmmap_pagetable(pagetable_t kernel_pagetable, uint64 va, uint64 pa, uint64 sz, int perm)
-+{
-+  if(mappages(kernel_pagetable, va, sz, pa, perm) != 0)
-+    panic("kvmmap_pagetable");
-+}
- 
--/*
-- * create a direct-map page table for the kernel.
-- */
--void
--kvminit()
-+void kvm_init_pagetable(pagetable_t* kernel_pagetable)
- {
--  kernel_pagetable = (pagetable_t) kalloc();
--  memset(kernel_pagetable, 0, PGSIZE);
-+  *kernel_pagetable = (pagetable_t) kalloc();
-+  memset(*kernel_pagetable, 0, PGSIZE);
- 
-   // uart registers
--  kvmmap(UART0, UART0, PGSIZE, PTE_R | PTE_W);
-+  kvmmap_pagetable(*kernel_pagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
- 
-   // virtio mmio disk interface
--  kvmmap(VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
-+  kvmmap_pagetable(*kernel_pagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
- 
-   // CLINT
--  kvmmap(CLINT, CLINT, 0x10000, PTE_R | PTE_W);
-+  kvmmap_pagetable(*kernel_pagetable, CLINT, CLINT, 0x10000, PTE_R | PTE_W);
- 
-   // PLIC
--  kvmmap(PLIC, PLIC, 0x400000, PTE_R | PTE_W);
-+  kvmmap_pagetable(*kernel_pagetable, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
- 
-   // map kernel text executable and read-only.
--  kvmmap(KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
-+  kvmmap_pagetable(*kernel_pagetable, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
- 
-   // map kernel data and the physical RAM we'll make use of.
--  kvmmap((uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
-+  kvmmap_pagetable(*kernel_pagetable, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
- 
-   // map the trampoline for trap entry/exit to
-   // the highest virtual address in the kernel.
--  kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
-+  kvmmap_pagetable(*kernel_pagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
-+}
-+
-+/*
-+ * create a direct-map page table for the kernel.
-+ */
-+void
-+kvminit()
-+{
-+  kvm_init_pagetable(&kernel_pagetable);
-+}
-+
-+void
-+kvminithart_pagetable(pagetable_t kernel_pagetable)
-+{
-+  w_satp(MAKE_SATP(kernel_pagetable));
-+  sfence_vma();
- }
- 
- // Switch h/w page table register to the kernel's page table,
-@@ -79,6 +97,24 @@ kvminithart()
-   sfence_vma();
- }
- 
-+void kernel_pagetable_free(pagetable_t pagetable)
-+{
-+    // there are 2^9 = 512 PTEs in a page table.
-+	for(int i = 0;i < 512; ++i) {
-+		pte_t pte = pagetable[i];
-+		if((pte & PTE_V)) {
-+				// 求出这一页对应的物理地址
-+				uint64 child = PTE2PA(pte);
-+				// printf("..%d: pte %p pa %p\n", i, pte, child);
-+				// 如果这一页可运行或读或写，那么就是最底层页表了，不用继续遍历了
-+				if((pte & (PTE_R|PTE_W|PTE_X)) == 0)
-+					kernel_pagetable_free((pagetable_t)child);
-+			  pagetable[i] = 0; // 释放这一页从 虚拟内存到物理内存的映射
-+		}
-+  }
-+	kfree((void*)pagetable);
-+}
-+
- // Return the address of the PTE in page table pagetable
- // that corresponds to virtual address va.  If alloc!=0,
- // create any required page-table pages.
-@@ -149,13 +185,13 @@ kvmmap(uint64 va, uint64 pa, uint64 sz, int perm)
- // addresses on the stack.
- // assumes va is page aligned.
- uint64
--kvmpa(uint64 va)
-+kvmpa(pagetable_t pagetable, uint64 va)
- {
-   uint64 off = va % PGSIZE;
-   pte_t *pte;
-   uint64 pa;
-   
--  pte = walk(kernel_pagetable, va, 0);
-+  pte = walk(pagetable, va, 0);
-   if(pte == 0)
-     panic("kvmpa");
-   if((*pte & PTE_V) == 0)
diff --git a/lab3_page_tables/Print_a_page_table.diff b/lab3_page_tables/Print_a_page_table.diff
deleted file mode 100644
index dc96acb..0000000
--- a/lab3_page_tables/Print_a_page_table.diff
+++ /dev/null
@@ -1,77 +0,0 @@
-diff --git a/grade-lab-pgtbl b/grade-lab-pgtbl
-index 2b0b49d..e17c4d2 100755
---- a/grade-lab-pgtbl
-+++ b/grade-lab-pgtbl
-@@ -1,4 +1,4 @@
--#!/usr/bin/env python
-+#!/usr/bin/env python3
- 
- import re
- from gradelib import *
-diff --git a/kernel/defs.h b/kernel/defs.h
-index a73b4f7..e834c21 100644
---- a/kernel/defs.h
-+++ b/kernel/defs.h
-@@ -8,6 +8,7 @@ struct spinlock;
- struct sleeplock;
- struct stat;
- struct superblock;
-+struct pagetable_t;
- #ifdef LAB_NET
- struct mbuf;
- struct sock;
-@@ -158,6 +159,7 @@ void            uartputc_sync(int);
- int             uartgetc(void);
- 
- // vm.c
-+void            vmprint(pagetable_t);
- void            kvminit(void);
- void            kvminithart(void);
- uint64          kvmpa(uint64);
-diff --git a/kernel/exec.c b/kernel/exec.c
-index 0e8762f..ee72a53 100644
---- a/kernel/exec.c
-+++ b/kernel/exec.c
-@@ -115,7 +115,7 @@ exec(char *path, char **argv)
-   p->trapframe->epc = elf.entry;  // initial program counter = main
-   p->trapframe->sp = sp; // initial stack pointer
-   proc_freepagetable(oldpagetable, oldsz);
--
-+  if(p->pid == 1) vmprint(p->pagetable);
-   return argc; // this ends up in a0, the first argument to main(argc, argv)
- 
-  bad:
-diff --git a/kernel/vm.c b/kernel/vm.c
-index bccb405..b2c9802 100644
---- a/kernel/vm.c
-+++ b/kernel/vm.c
-@@ -14,6 +14,29 @@ pagetable_t kernel_pagetable;
- extern char etext[];  // kernel.ld sets this to end of kernel code.
- 
- extern char trampoline[]; // trampoline.S
-+// 前序遍历整个页表，printf 所有 PTE_V 的页表基地址
-+static void vmprint_helper(pagetable_t pagetable, int layout)
-+{
-+    for(int i = 0;i < 512; ++i) {
-+        pte_t pte = pagetable[i];
-+        if((pte & PTE_V)) {
-+            // 求出这一页对应的物理地址
-+            uint64 child = PTE2PA(pte);
-+            for(int i = 0;i < layout; ++i)
-+                printf(".. ");
-+            printf("..%d: pte %p pa %p\n", i, pte, child);
-+            // 如果这一页可运行或读或写，那么就是最底层页表了，不用继续遍历了
-+            if((pte & (PTE_R|PTE_W|PTE_X)) == 0)
-+                vmprint_helper((pagetable_t)child, layout + 1);
-+        }
-+    }
-+}
-+
-+void vmprint(pagetable_t pagetable)
-+{
-+    printf("page table %p\n", pagetable);
-+    vmprint_helper(pagetable, 0);
-+}
- 
- /*
-  * create a direct-map page table for the kernel.
diff --git a/user/sh.c b/user/sh.c
index 83dd513..387e0c4 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -154,7 +154,13 @@ main(void)
       break;
     }
   }
-
+  // 每次启动自动测试 usertests 
+  {
+    if(fork1() == 0)  
+      runcmd(parsecmd("usertests\n"));
+    wait(0);
+  }
+  
   // Read and run input commands.
   while(getcmd(buf, sizeof(buf)) >= 0){
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
diff --git a/user/usertests.c b/user/usertests.c
index 004c948..f4789fe 100644
--- a/user/usertests.c
+++ b/user/usertests.c
@@ -132,7 +132,6 @@ void
 copyinstr2(char *s)
 {
   char b[MAXPATH+1];
-
   for(int i = 0; i < MAXPATH; i++)
     b[i] = 'x';
   b[MAXPATH] = '\0';
@@ -142,7 +141,6 @@ copyinstr2(char *s)
     printf("unlink(%s) returned %d, not -1\n", b, ret);
     exit(1);
   }
-
   int fd = open(b, O_CREATE | O_WRONLY);
   if(fd != -1){
     printf("open(%s) returned %d, not -1\n", b, fd);
@@ -167,12 +165,13 @@ copyinstr2(char *s)
     printf("fork failed\n");
     exit(1);
   }
+
   if(pid == 0){
-    static char big[PGSIZE+1];
+    static char big[PGSIZE+1 ];
     for(int i = 0; i < PGSIZE; i++)
       big[i] = 'x';
     big[PGSIZE] = '\0';
-    char *args2[] = { big, big, big, 0 };
+    char *args2[] = { big, big, big,big, 0 };
     ret = exec("echo", args2);
     if(ret != -1){
       printf("exec(echo, BIG) returned %d, not -1\n", fd);
