diff --git a/kernel/defs.h b/kernel/defs.h
index e834c21..596c4c3 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -159,10 +159,15 @@ void            uartputc_sync(int);
 int             uartgetc(void);
 
 // vm.c
+void            kvmmap_pagetable(pagetable_t kernel_pagetable, 
+                uint64 va, uint64 pa, uint64 sz, int perm);
+void            kernel_pagetable_free(pagetable_t);
+void            kvm_init_pagetable(pagetable_t*);
+void            kvminithart_pagetable(pagetable_t);
 void            vmprint(pagetable_t);
 void            kvminit(void);
 void            kvminithart(void);
-uint64          kvmpa(uint64);
+uint64          kvmpa(pagetable_t, uint64);
 void            kvmmap(uint64, uint64, uint64, int);
 int             mappages(pagetable_t, uint64, uint64, uint64, int);
 pagetable_t     uvmcreate(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index dab1e1d..654c558 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -25,23 +25,13 @@ extern char trampoline[]; // trampoline.S
 void
 procinit(void)
 {
-  struct proc *p;
+  struct proc *p = proc;
   
   initlock(&pid_lock, "nextpid");
-  for(p = proc; p < &proc[NPROC]; p++) {
-      initlock(&p->lock, "proc");
-
-      // Allocate a page for the process's kernel stack.
-      // Map it high in memory, followed by an invalid
-      // guard page.
-      char *pa = kalloc();
-      if(pa == 0)
-        panic("kalloc");
-      uint64 va = KSTACK((int) (p - proc));
-      kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
-      p->kstack = va;
-  }
-  kvminithart();
+  for(p = proc; p < &proc[NPROC]; p++) 
+    initlock(&p->lock, "proc");
+  
+  kvminithart(); // 切换此进程的内核页表
 }
 
 // Must be called with interrupts disabled,
@@ -120,13 +110,23 @@ found:
     release(&p->lock);
     return 0;
   }
+  
+  kvm_init_pagetable(&p->kernel_pagetable); // 初始化每一个进程内核页表
+  // Allocate a page for the process's kernel stack.
+  // Map it high in memory, followed by an invalid
+  // guard page.
+  char *pa = kalloc();
+  if(pa == 0)
+    panic("kalloc");
+  uint64 va = KSTACK((int) (0));
+  kvmmap_pagetable(p->kernel_pagetable, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+  p->kstack = va;
 
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-
   return p;
 }
 
@@ -150,6 +150,12 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  
+  uint64 kstack_pa  = kvmpa(p->kernel_pagetable, p->kstack);
+  kfree((void*)kstack_pa);
+  p->kstack = 0;
+  kernel_pagetable_free(p->kernel_pagetable);
+  p->kernel_pagetable = 0;
 }
 
 // Create a user page table for a given process,
@@ -473,8 +479,9 @@ scheduler(void)
         // before jumping back to us.
         p->state = RUNNING;
         c->proc = p;
+        kvminithart_pagetable(p->kernel_pagetable); // 切换此进程的内核页表
         swtch(&c->context, &p->context);
-
+        kvminithart(); // 没有进程就切换为 原来的内核页表
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..171b785 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  pagetable_t kernel_pagetable;   // 每一个进程的内核页表
 };
diff --git a/kernel/virtio_disk.c b/kernel/virtio_disk.c
index 06e0645..5c0e5fe 100644
--- a/kernel/virtio_disk.c
+++ b/kernel/virtio_disk.c
@@ -16,6 +16,7 @@
 #include "fs.h"
 #include "buf.h"
 #include "virtio.h"
+#include "proc.h"
 
 // the address of virtio mmio register r.
 #define R(r) ((volatile uint32 *)(VIRTIO0 + (r)))
@@ -203,7 +204,7 @@ virtio_disk_rw(struct buf *b, int write)
 
   // buf0 is on a kernel stack, which is not direct mapped,
   // thus the call to kvmpa().
-  disk.desc[idx[0]].addr = (uint64) kvmpa((uint64) &buf0);
+  disk.desc[idx[0]].addr = (uint64) kvmpa(myproc()->kernel_pagetable ,(uint64) &buf0);
   disk.desc[idx[0]].len = sizeof(buf0);
   disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
   disk.desc[idx[0]].next = idx[1];
diff --git a/kernel/vm.c b/kernel/vm.c
index b2c9802..f6bf679 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -37,37 +37,55 @@ void vmprint(pagetable_t pagetable)
     printf("page table %p\n", pagetable);
     vmprint_helper(pagetable, 0);
 }
+void 
+kvmmap_pagetable(pagetable_t kernel_pagetable, uint64 va, uint64 pa, uint64 sz, int perm)
+{
+  if(mappages(kernel_pagetable, va, sz, pa, perm) != 0)
+    panic("kvmmap_pagetable");
+}
 
-/*
- * create a direct-map page table for the kernel.
- */
-void
-kvminit()
+void kvm_init_pagetable(pagetable_t* kernel_pagetable)
 {
-  kernel_pagetable = (pagetable_t) kalloc();
-  memset(kernel_pagetable, 0, PGSIZE);
+  *kernel_pagetable = (pagetable_t) kalloc();
+  memset(*kernel_pagetable, 0, PGSIZE);
 
   // uart registers
-  kvmmap(UART0, UART0, PGSIZE, PTE_R | PTE_W);
+  kvmmap_pagetable(*kernel_pagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
 
   // virtio mmio disk interface
-  kvmmap(VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+  kvmmap_pagetable(*kernel_pagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
 
   // CLINT
-  kvmmap(CLINT, CLINT, 0x10000, PTE_R | PTE_W);
+  kvmmap_pagetable(*kernel_pagetable, CLINT, CLINT, 0x10000, PTE_R | PTE_W);
 
   // PLIC
-  kvmmap(PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+  kvmmap_pagetable(*kernel_pagetable, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
 
   // map kernel text executable and read-only.
-  kvmmap(KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
+  kvmmap_pagetable(*kernel_pagetable, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
 
   // map kernel data and the physical RAM we'll make use of.
-  kvmmap((uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
+  kvmmap_pagetable(*kernel_pagetable, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
 
   // map the trampoline for trap entry/exit to
   // the highest virtual address in the kernel.
-  kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+  kvmmap_pagetable(*kernel_pagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+}
+
+/*
+ * create a direct-map page table for the kernel.
+ */
+void
+kvminit()
+{
+  kvm_init_pagetable(&kernel_pagetable);
+}
+
+void
+kvminithart_pagetable(pagetable_t kernel_pagetable)
+{
+  w_satp(MAKE_SATP(kernel_pagetable));
+  sfence_vma();
 }
 
 // Switch h/w page table register to the kernel's page table,
@@ -79,6 +97,24 @@ kvminithart()
   sfence_vma();
 }
 
+void kernel_pagetable_free(pagetable_t pagetable)
+{
+    // there are 2^9 = 512 PTEs in a page table.
+	for(int i = 0;i < 512; ++i) {
+		pte_t pte = pagetable[i];
+		if((pte & PTE_V)) {
+				// 求出这一页对应的物理地址
+				uint64 child = PTE2PA(pte);
+				// printf("..%d: pte %p pa %p\n", i, pte, child);
+				// 如果这一页可运行或读或写，那么就是最底层页表了，不用继续遍历了
+				if((pte & (PTE_R|PTE_W|PTE_X)) == 0)
+					kernel_pagetable_free((pagetable_t)child);
+			  pagetable[i] = 0; // 释放这一页从 虚拟内存到物理内存的映射
+		}
+  }
+	kfree((void*)pagetable);
+}
+
 // Return the address of the PTE in page table pagetable
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page-table pages.
@@ -149,13 +185,13 @@ kvmmap(uint64 va, uint64 pa, uint64 sz, int perm)
 // addresses on the stack.
 // assumes va is page aligned.
 uint64
-kvmpa(uint64 va)
+kvmpa(pagetable_t pagetable, uint64 va)
 {
   uint64 off = va % PGSIZE;
   pte_t *pte;
   uint64 pa;
   
-  pte = walk(kernel_pagetable, va, 0);
+  pte = walk(pagetable, va, 0);
   if(pte == 0)
     panic("kvmpa");
   if((*pte & PTE_V) == 0)
