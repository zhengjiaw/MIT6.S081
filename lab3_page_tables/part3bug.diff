diff --git a/kernel/defs.h b/kernel/defs.h
index 596c4c3..f1cb2dc 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -159,6 +159,7 @@ void            uartputc_sync(int);
 int             uartgetc(void);
 
 // vm.c
+int             uvmcopy_not_physical(pagetable_t, pagetable_t, uint64, uint64);           
 void            kvmmap_pagetable(pagetable_t kernel_pagetable, 
                 uint64 va, uint64 pa, uint64 sz, int perm);
 void            kernel_pagetable_free(pagetable_t);
diff --git a/kernel/exec.c b/kernel/exec.c
index ee72a53..8abcc15 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -51,6 +51,8 @@ exec(char *path, char **argv)
     uint64 sz1;
     if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
       goto bad;
+    // if(sz1 >= PLIC)  // 检测
+    //     goto bad;
     sz = sz1;
     if(ph.vaddr % PGSIZE != 0)
       goto bad;
@@ -111,6 +113,8 @@ exec(char *path, char **argv)
   // Commit to the user image.
   oldpagetable = p->pagetable;
   p->pagetable = pagetable;
+  uvmunmap(p->kernel_pagetable, 0, PGROUNDUP(p->sz) / PGSIZE, 0);
+  uvmcopy_not_physical(pagetable, p->kernel_pagetable, 0, sz);
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
diff --git a/kernel/proc.c b/kernel/proc.c
index 654c558..bace914 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -233,8 +233,8 @@ userinit(void)
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
-
   p->state = RUNNABLE;
+  uvmcopy_not_physical(p->pagetable, p->kernel_pagetable, 0, p->sz);
 
   release(&p->lock);
 }
@@ -252,9 +252,23 @@ growproc(int n)
     if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
       return -1;
     }
+    // uvmunmap(p->kernel_pagetable, 0, PGROUNDUP(p->sz) / PGSIZE, 0);
+    uvmcopy_not_physical(p->pagetable, p->kernel_pagetable, p->sz, sz);
+    // if(uvmcopy_not_physical(p->pagetable, p->kernel_pagetable, p->sz, p->sz + n) != 0) {
+    //     uvmdealloc(p->pagetable, sz, p->sz);
+    //     return -1;
+    // }
+
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+      sz = uvmdealloc(p->pagetable, sz, sz + n);
+      int newsz = p->sz + n;
+      if(PGROUNDUP(newsz) < PGROUNDUP(p->sz)){
+        int npages = (PGROUNDUP(p->sz) - PGROUNDUP(newsz)) / PGSIZE;
+        uvmunmap(p->kernel_pagetable, PGROUNDUP(newsz), npages, 0);
+      }
+    
   }
+ 
   p->sz = sz;
   return 0;
 }
@@ -274,7 +288,8 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0
+     || uvmcopy_not_physical(p->pagetable, np->kernel_pagetable, 0, p->sz) < 0){
     freeproc(np);
     release(&np->lock);
     return -1;
diff --git a/kernel/vm.c b/kernel/vm.c
index f6bf679..22e83f8 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -394,6 +394,30 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmcopy_not_physical(pagetable_t old, pagetable_t new, uint64 begin, uint64 end)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = PGROUNDUP(begin); i < end; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte) & (~PTE_U);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0)
+      goto err;
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -431,30 +455,17 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   }
   return 0;
 }
-
+int
+copyin_new(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len);
+int
+copyinstr_new(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max);
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
 int
 copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
-  uint64 n, va0, pa0;
-
-  while(len > 0){
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (srcva - va0);
-    if(n > len)
-      n = len;
-    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
-
-    len -= n;
-    dst += n;
-    srcva = va0 + PGSIZE;
-  }
-  return 0;
+  return copyin_new(pagetable, dst, srcva, len);
 }
 
 // Copy a null-terminated string from user to kernel.
@@ -464,7 +475,7 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 int
 copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 {
-  uint64 n, va0, pa0;
+    uint64 n, va0, pa0;
   int got_null = 0;
 
   while(got_null == 0 && max > 0){
@@ -498,4 +509,5 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
   } else {
     return -1;
   }
+  return copyinstr_new(pagetable, dst, srcva, max);
 }
