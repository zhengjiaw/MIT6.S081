diff --git a/kernel/defs.h b/kernel/defs.h
index 596c4c3..66dadfc 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -159,6 +159,8 @@ void            uartputc_sync(int);
 int             uartgetc(void);
 
 // vm.c
+pte_t *         walk(pagetable_t pagetable, uint64 va, int alloc);
+int             uvmcopy_not_physical(pagetable_t, pagetable_t, uint64, uint64);           
 void            kvmmap_pagetable(pagetable_t kernel_pagetable, 
                 uint64 va, uint64 pa, uint64 sz, int perm);
 void            kernel_pagetable_free(pagetable_t);
diff --git a/kernel/exec.c b/kernel/exec.c
index ee72a53..bc45d6d 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -12,6 +12,8 @@ static int loadseg(pde_t *pgdir, uint64 addr, struct inode *ip, uint offset, uin
 int
 exec(char *path, char **argv)
 {
+  printf("path %s  str : %s      --- \n", path, argv[0]);
+  printf("str : %s      --- \n", argv[1]);
   char *s, *last;
   int i, off;
   uint64 argc, sz = 0, sp, ustack[MAXARG+1], stackbase;
@@ -51,6 +53,8 @@ exec(char *path, char **argv)
     uint64 sz1;
     if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
       goto bad;
+    if(sz1 >= PLIC)  // 检测
+        goto bad;
     sz = sz1;
     if(ph.vaddr % PGSIZE != 0)
       goto bad;
@@ -80,6 +84,8 @@ exec(char *path, char **argv)
     if(argc >= MAXARG)
       goto bad;
     sp -= strlen(argv[argc]) + 1;
+    // printf("str : %s      --- \n", argv[argc]);
+    // printf("strlen : %d      --- \n", strlen(argv[argc]));
     sp -= sp % 16; // riscv sp must be 16-byte aligned
     if(sp < stackbase)
       goto bad;
@@ -111,6 +117,8 @@ exec(char *path, char **argv)
   // Commit to the user image.
   oldpagetable = p->pagetable;
   p->pagetable = pagetable;
+  uvmunmap(p->kernel_pagetable, 0, PGROUNDUP(p->sz) / PGSIZE, 0);
+  uvmcopy_not_physical(pagetable, p->kernel_pagetable, 0, sz);
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
diff --git a/kernel/proc.c b/kernel/proc.c
index 654c558..31cf9bf 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -226,6 +226,7 @@ userinit(void)
   // and data into it.
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
+  uvmcopy_not_physical(p->pagetable, p->kernel_pagetable, 0, p->sz);
 
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
@@ -233,7 +234,6 @@ userinit(void)
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
-
   p->state = RUNNABLE;
 
   release(&p->lock);
@@ -252,9 +252,25 @@ growproc(int n)
     if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
       return -1;
     }
+    // if (PGROUNDUP(sz + n) >= PLIC)
+    //   return -1;
+    // uvmunmap(p->kernel_pagetable, 0, PGROUNDUP(p->sz) / PGSIZE, 0);
+    uvmcopy_not_physical(p->pagetable, p->kernel_pagetable, p->sz, sz);
+    // if(uvmcopy_not_physical(p->pagetable, p->kernel_pagetable, p->sz, p->sz + n) != 0) {
+    //     uvmdealloc(p->pagetable, sz, p->sz);
+    //     return -1;
+    // }
+
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+      sz = uvmdealloc(p->pagetable, sz, sz + n);
+      // int newsz = p->sz + n;
+      // if(PGROUNDUP(newsz) < PGROUNDUP(p->sz)){
+      //   int npages = (PGROUNDUP(p->sz) - PGROUNDUP(newsz)) / PGSIZE;
+      //   uvmunmap(p->kernel_pagetable, PGROUNDUP(newsz), npages, 0);
+      // }
+    
   }
+ 
   p->sz = sz;
   return 0;
 }
@@ -274,7 +290,8 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0
+     || uvmcopy_not_physical(p->pagetable, np->kernel_pagetable, 0, p->sz) < 0){
     freeproc(np);
     release(&np->lock);
     return -1;
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 5dc453b..4ea452e 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -418,7 +418,7 @@ sys_exec(void)
   char path[MAXPATH], *argv[MAXARG];
   int i;
   uint64 uargv, uarg;
-
+  // 拿到 两个参数，path，argv
   if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
     return -1;
   }
diff --git a/kernel/vm.c b/kernel/vm.c
index f6bf679..c95938b 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -48,7 +48,6 @@ void kvm_init_pagetable(pagetable_t* kernel_pagetable)
 {
   *kernel_pagetable = (pagetable_t) kalloc();
   memset(*kernel_pagetable, 0, PGSIZE);
-
   // uart registers
   kvmmap_pagetable(*kernel_pagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
 
@@ -394,6 +393,50 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+mappagest(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
+{
+  uint64 a, last;
+  pte_t *pte;
+
+  a = PGROUNDDOWN(va);
+  last = PGROUNDDOWN(va + size - 1);
+  for(;;){
+    if((pte = walk(pagetable, a, 1)) == 0)
+      return -1;
+    *pte = PA2PTE(pa) | perm | PTE_V;
+    if(a == last)
+      break;
+    a += PGSIZE;
+    pa += PGSIZE;
+  }
+  return 0;
+}
+
+int
+uvmcopy_not_physical(pagetable_t old, pagetable_t new, uint64 begin, uint64 end)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = PGROUNDUP(begin); i < end; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte) & (~PTE_U);
+    if(mappagest(new, i, PGSIZE, pa, flags) != 0)
+      goto err;
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -431,30 +474,34 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   }
   return 0;
 }
-
+int
+copyin_new(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len);
+int
+copyinstr_new(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max);
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
 int
 copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
-  uint64 n, va0, pa0;
-
-  while(len > 0){
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (srcva - va0);
-    if(n > len)
-      n = len;
-    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
-
-    len -= n;
-    dst += n;
-    srcva = va0 + PGSIZE;
-  }
-  return 0;
+//   uint64 n, va0, pa0;
+
+//   while(len > 0){
+//     va0 = PGROUNDDOWN(srcva);
+//     pa0 = walkaddr(pagetable, va0);
+//     if(pa0 == 0)
+//       return -1;
+//     n = PGSIZE - (srcva - va0);
+//     if(n > len)
+//       n = len;
+//     memmove(dst, (void *)(pa0 + (srcva - va0)), n);
+
+//     len -= n;
+//     dst += n;
+//     srcva = va0 + PGSIZE;
+//   }
+//   return 0;
+  return copyin_new(pagetable, dst, srcva, len);
 }
 
 // Copy a null-terminated string from user to kernel.
@@ -464,7 +511,7 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 int
 copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 {
-  uint64 n, va0, pa0;
+    uint64 n, va0, pa0;
   int got_null = 0;
 
   while(got_null == 0 && max > 0){
@@ -498,4 +545,5 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
   } else {
     return -1;
   }
+  return copyinstr_new(pagetable, dst, srcva, max);
 }
diff --git a/user/usertests.c b/user/usertests.c
index 004c948..d6ade13 100644
--- a/user/usertests.c
+++ b/user/usertests.c
@@ -132,7 +132,6 @@ void
 copyinstr2(char *s)
 {
   char b[MAXPATH+1];
-
   for(int i = 0; i < MAXPATH; i++)
     b[i] = 'x';
   b[MAXPATH] = '\0';
@@ -142,7 +141,6 @@ copyinstr2(char *s)
     printf("unlink(%s) returned %d, not -1\n", b, ret);
     exit(1);
   }
-
   int fd = open(b, O_CREATE | O_WRONLY);
   if(fd != -1){
     printf("open(%s) returned %d, not -1\n", b, fd);
@@ -167,12 +165,13 @@ copyinstr2(char *s)
     printf("fork failed\n");
     exit(1);
   }
+
   if(pid == 0){
-    static char big[PGSIZE+1];
+    static char big[PGSIZE+1 ];
     for(int i = 0; i < PGSIZE; i++)
       big[i] = 'x';
     big[PGSIZE] = '\0';
-    char *args2[] = { big, big, big, 0 };
+    char *args2[] = { big, big, big,big, 0 };
     ret = exec("echo", args2);
     if(ret != -1){
       printf("exec(echo, BIG) returned %d, not -1\n", fd);
@@ -2638,10 +2637,10 @@ main(int argc, char *argv[])
     void (*f)(char *);
     char *s;
   } tests[] = {
-    {execout, "execout"},
-    {copyin, "copyin"},
-    {copyout, "copyout"},
-    {copyinstr1, "copyinstr1"},
+    // {execout, "execout"},
+    // {copyin, "copyin"},
+    // {copyout, "copyout"},
+    // {copyinstr1, "copyinstr1"},
     {copyinstr2, "copyinstr2"},
     {copyinstr3, "copyinstr3"},
     {truncate1, "truncate1"},
